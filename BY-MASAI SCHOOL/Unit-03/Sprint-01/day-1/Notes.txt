Following are the steps to install Android studio :
Windows
To install Android Studio on Windows, proceed as follows:

If you downloaded an .exe file (recommended), double-click to launch it.
If you downloaded a .zip file, unpack the ZIP, copy the android-studio folder into your Program Files folder, and then open the android-studio > bin folder and launch studio64.exe (for 64-bit machines) or studio.exe (for 32-bit machines).
Follow the setup wizard in Android Studio and install any SDK packages that it recommends.

Video Reference : here

Linux
To install Android Studio on Linux, proceed as follows:

Unpack the .zip file you downloaded to an appropriate location for your applications, such as within /usr/local/ for your user profile, or /opt/ for shared users. If you're using a 64-bit version of Linux, make sure you first install the required libraries for 64-bit machines.

To launch Android Studio, open a terminal, navigate to the android-studio/bin/ directory, and execute studio.sh.

Select whether you want to import previous Android Studio settings or not, then click OK.

The Android Studio Setup Wizard guides you through the rest of the setup, which includes downloading Android SDK components that are required for development.

Required libraries for 64-bit machines If you are running a 64-bit version of Ubuntu, you need to install some 32-bit libraries with the following command:

sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386

If you are running 64-bit Fedora, the command is:

sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686

Note : As new tools and other APIs become available, Android Studio tells you with a pop-up, or you can check for updates by clicking Help > Check for Updates.

What is an Android Virtual Device ?
An Android Virtual Device (AVD) is a configuration that defines the characteristics of an Android phone, tablet, Wear OS, Android TV, or Automotive OS device that you want to simulate in the Android Emulator. The AVD Manager is an interface you can launch from Android Studio that helps you create and manage AVDs.

How to create an AVD ?
Open the AVD Manager by clicking Tools > AVD Manager.
Click Create Virtual Device, at the bottom of the AVD Manager dialog. The Select Hardware page appears.
Select a hardware profile, and then click Next. If you don't see the hardware profile you want, you can create or import a hardware profile. The System Image page appears.
Select the system image for a particular API level, and then click Next.
Change AVD properties as needed, and then click Finish.
Introduction:
Android is an Operating system for the smartphones. Apart from smartphones Android is also used in tablets, wearable devices, Smart Tv, Automatives.

Android Architecture



Linux kernel
It is the heart of android architecture that exists at the root of android architecture. Linux kernel is responsible for device drivers, power management, memory management, device management and resource access.

Native Libraries
On the top of linux kernel, their are Native libraries such as WebKit, OpenGL, FreeType, SQLite, Media, C runtime library (libc) etc. The WebKit library is responsible for browser support, SQLite is for database, FreeType for font support, Media for playing and recording audio and video formats.

Android Runtime
In android runtime, there are core libraries and DVM (Dalvik Virtual Machine) which is responsible to run android application. DVM is like JVM but it is optimized for mobile devices. It consumes less memory and provides fast performance.

Android Framework
On the top of Native libraries and android runtime, there is android framework. Android framework includes Android API's such as UI (User Interface), telephony, resources, locations, Content Providers (data) and package managers. It provides a lot of classes and interfaces for android application development.

Applications
On the top of android framework, there are applications. All applications such as home, contact, settings, games, browsers are using android framework that uses android runtime and libraries. Android runtime and native libraries are using linux kernal.

Understanding the Android Compilation Process
From source code to bytecode
You will need JDK (Java Developer Kit) to compile the Java code of your application. Your code and precompiled classes from runtime and custom libraries are compiled first by Javac. The Javac outputs a set of Java bytecode files. So far this looks like any Java compiler process but the next compilation step makes the compilation process unique to Android.

The obfuscator! (ProGuard Tool)
This step is optional, you can omit this step if you want to. The ProGuard Tool takes the Java bytecode files (output as a step number 1) and sends them through a tool named ProGuard. It will minimize and obfuscate (meaning - To make obscure, unclear or unintelligible) your code. It is disabled by default in new Android projects but when ProGuard is turned on,it will analyze your code and remove implementations of methods, for example, that aren't called. This can dramatically shrink your distributable app package. It also obfuscates your code by changing method names and so on making it harder to decompile packaged Java code by a third person or organization. Regardless of the use of ProGuard you once again end up with .class files (minimized bytecode).

From minimized bytecode to dex code
The next step is to take the output files from step number 2 and to turn those files into dex bytecode - Dalvik Executable(.DEX). The DEX bytecode is a format that is optimized for Android and which can be executed by the older DALVIK runtime or the newer ART runtime.

Execution of Machine Code
The device's runtime read these dex files (output of step number 3) and recompile some of the files to machine code for the fastest possible execution. On DALVIK this step happens as the app runs using Just-In-Time or JIT architecture. On the newer ART, the recompilation (or translation to machine code) happens when the app is first installed, meaning that the app can run faster when the user runs it on his/her device. And that's how your Java code turns into something that runs on Android. It starts with Java and after a couple of steps, it is transformed into something which the Android runtime can read and execute.



What is Android Runtime?
So, you can think of Runtime as a software that is used to convert the High level language in to Machine level code i.e. in Android, if you are writing some Android code in Java or Kotlin then this runtime will be used to convert the Java or Kotlin code in to Machine level code and the Android system uses this Machine code. Android uses two types of runtime i.e. Dalvik and ART. So. letâ€™s have a look at these two.

What is Dalvik? Dalvik is a Just In Time (JIT) compiler. By the term JIT, we mean to say that whenever you run your app in your mobile device then that part of your code that is needed for execution of your app will only be compiled at that moment and rest of the code will be compiled in the future when needed. The JIT or Just In Time compiles only a part of your code and it has a smaller memory footprint and due to this, it uses very less physical space on your device.

What is ART? ART or Android Runtime is an Android runtime that uses Ahead Of Time(AOT). By using AOT, what is does is it converts or compiles the whole High-level language code into Machine level code and at the time of installation of the app and not dynamically as the application runs(like in case of Dalvik). By compiling the whole code during installation results in no lag that we see when we run our app on our device. By doing so, the compilation becomes very faster.

What is an APK file?
An APK file is an app created for Android, Google's mobile operating system. Some apps come pre-installed on Android devices, while other apps can be downloaded from Google Play. Apps downloaded from Google Play are automatically installed on your device, while those downloaded from other sources must be installed manually.

What does an APK file contain?
Android packages contain all the necessary files for a single Android program. Below is a list of the most prominent files and folders:

META-INF/: Contains the manifest file, signature, and a list of resources in the archive
lib/: Native libraries that run on specific device architectures (armeabi-v7a, x86, etc.)
res/: Resources, such as images, that were not compiled into resources.arsc
assets/: Raw resource files that developers bundle with the app
AndroidManifest.xml: Describes the name, version, and contents of the APK file
classes.dex: The compiled Java classes to be run on the device (.DEX file)
resources.arsc: The compiled resources, such as strings, used by the app (.ARSC file)